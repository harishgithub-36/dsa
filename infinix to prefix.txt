
 Java implementation to convert infix expression to postfix
 Note that here we use Stack class for Stack operations 
  
import java.util.Stack; 
import java.util.;
class Main 
{ 
     A utility function to return precedence of a given operator 
     Higher returned value means higher precedence 
    static int Prec(char ch) 
    { 
        switch (ch) 
        { 
        case '+' 
        case '-' 
            return 1; 
       
        case '' 
        case '' 
            return 2; 
       
        case '^' 
            return 3; 
        } 
        return -1; 
    } 
       
     The main method that converts given infix expression 
     to postfix expression.  
    static String infixToPostfix(String exp) 
    { 
         initializing empty String for result 
        String result = new String(); 
          
         initializing empty stack 
        StackCharacter stack = new Stack(); 
          
        for (int i = 0; iexp.length(); ++i) 
        { 
            char c = exp.charAt(i); 
              
              If the scanned character is an operand, add it to output. 
            if (Character.isLetterOrDigit(c)) 
                result += c; 
               
             If the scanned character is an '(', push it to the stack. 
            else if (c == '(') 
                stack.push(c); 
              
              If the scanned character is an ')', pop and output from the stack  
             until an '(' is encountered. 
            else if (c == ')') 
            { 
                while (!stack.isEmpty() && stack.peek() != '(') 
                    result += stack.pop(); 
                  
                if (!stack.isEmpty() && stack.peek() != '(') 
                    return Invalid Expression;  invalid expression                 
                else
                    stack.pop(); 
            } 
            else  an operator is encountered 
            { 
                while (!stack.isEmpty() && Prec(c) = Prec(stack.peek())){ 
                    if(stack.peek() == '(') 
                        return Invalid Expression; 
                    result += stack.pop(); 
             } 
                stack.push(c); 
            } 
       
        } 
       
         pop all the operators from the stack 
        while (!stack.isEmpty()){ 
            if(stack.peek() == '(') 
                return Invalid Expression; 
            result += stack.pop(); 
         } 
        return result; 
    } 
    public static void infixToPrefix(String exp)
    {
          StringBuilder str1=new StringBuilder(exp);
          str1.reverse();
        String res=;
        char ch[]=new char[10];
        ch=exp.toCharArray();
        for(int i=ch.length-1;i=0;i--)
        res+=ch[i];
        ch=res.toCharArray();
        for(int i=0;ich.length;i++)
        {
            if(ch[i]=='(')
            ch[i]=')';
            if(ch[i]==')')
            ch[i]='(';
        }
        String res1=;
        for(int i=0;ich.length;i++)
        res1+=ch[i];
        System.out.println(res1);
       String res2= infixToPostfix(res1);
       char ch1[]=res2.toCharArray();
       res2=;
       for(int i=ch1.length-1;i=0;i--)
       res2+=ch1[i];
        System.out.print(res2);
    }
     Driver method  
    public static void main(String[] args)  
    { 
        String exp = ab+cd; 
        
    infixToPrefix(exp); 
    }
}